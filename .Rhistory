ggplot(swift_tracks_cleaned) +
geom_density_ridges(aes(x=value, y=factor, fill=genre), scale=1.5, color="white", alpha=0.5) +
scale_x_continuous(limits=c(0, 1), breaks=seq(0, 1, 0.25), expand = c(0, 0)) +
theme_bw() +
theme(panel.border = element_blank(),
plot.margin = margin(0, 10, 0, 0),
aspect.ratio = 0.67,
legend.margin = margin(-10, 0, 0, 0),
legend.position = "top",
legend.justification = "left",
legend.direction = "vertical",
legend.text.align = 0,
legend.text = element_text(family="serif", color="gray20"),
plot.title = element_text(family="serif", face="bold", color="midnightblue", size=16),
plot.subtitle = element_text(family="serif", color="gray20"),
axis.text.y = element_text(family="sans", face="italic", color="gray40"),
axis.text.x = element_text(family="sans", color="gray40"),
plot.caption = element_text(family="mono", color="black")) +
scale_fill_manual(values=c("darkblue","darkorange"),
labels=c(expression("Country Album " * italic("(Self-titled, Fearless, Speak Now)")),
expression("Pop Album " * italic("(1989, reputation, Lover)")))) +
labs(title="From Country to Pop\nHas Taylor Swift's Music Changed?",
subtitle="Audio Features of Tracks on Recorded Studio Albums",
x="", fill="", y="", caption="Source: Spotify")
ggplot(swift_tracks_cleaned) +
geom_density_ridges(aes(x=value, y=factor, fill=genre), scale=1.5, color="white", alpha=0.5) +
scale_x_continuous(limits=c(0, 1), breaks=seq(0, 1, 0.25), expand = c(0, 0)) +
theme_bw() +
theme(panel.border = element_blank(),
plot.margin = margin(0, 0, 0, 0),
aspect.ratio = 0.67,
legend.margin = margin(-10, 0, 0, 0),
legend.position = "top",
legend.justification = "left",
legend.direction = "vertical",
legend.text.align = 0,
legend.text = element_text(family="serif", color="gray20"),
plot.title = element_text(family="serif", face="bold", color="midnightblue", size=16),
plot.subtitle = element_text(family="serif", color="gray20"),
axis.text.y = element_text(family="sans", face="italic", color="gray40"),
axis.text.x = element_text(family="sans", color="gray40"),
plot.caption = element_text(family="mono", color="black")) +
scale_fill_manual(values=c("darkblue","darkorange"),
labels=c(expression("Country Album " * italic("(Self-titled, Fearless, Speak Now)")),
expression("Pop Album " * italic("(1989, reputation, Lover)")))) +
labs(title="From Country to Pop\nHas Taylor Swift's Music Changed?",
subtitle="Audio Features of Tracks on Recorded Studio Albums",
x="", fill="", y="", caption="Source: Spotify")
ggplot(swift_tracks_cleaned) +
geom_density_ridges(aes(x=value, y=factor, fill=genre), scale=1.5, color="white", alpha=0.5) +
scale_x_continuous(limits=c(0, 1), breaks=seq(0, 1, 0.25), expand = c(0, 0)) +
theme_bw() +
theme(panel.border = element_blank(),
plot.margin = margin(0, 10, 0, 0),
legend.margin = margin(-10, 0, 0, 0),
legend.position = "top",
legend.justification = "left",
legend.direction = "vertical",
legend.text.align = 0,
legend.text = element_text(family="serif", color="gray20"),
plot.title = element_text(family="serif", face="bold", color="midnightblue", size=16),
plot.subtitle = element_text(family="serif", color="gray20"),
axis.text.y = element_text(family="sans", face="italic", color="gray40"),
axis.text.x = element_text(family="sans", color="gray40"),
plot.caption = element_text(family="mono", color="black")) +
scale_fill_manual(values=c("darkblue","darkorange"),
labels=c(expression("Country Album " * italic("(Self-titled, Fearless, Speak Now)")),
expression("Pop Album " * italic("(1989, reputation, Lover)")))) +
labs(title="From Country to Pop\nHas Taylor Swift's Music Changed?",
subtitle="Audio Features of Tracks on Recorded Studio Albums",
x="", fill="", y="", caption="Source: Spotify")
ggplot(swift_tracks_cleaned) +
geom_density_ridges(aes(x=value, y=factor, fill=genre), scale=1.5, color="white", alpha=0.5) +
scale_x_continuous(limits=c(0, 1), breaks=seq(0, 1, 0.25), expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme_bw() +
theme(panel.border = element_blank(),
plot.margin = margin(0, 10, 0, 0),
legend.margin = margin(-10, 0, 0, 0),
legend.position = "top",
legend.justification = "left",
legend.direction = "vertical",
legend.text.align = 0,
legend.text = element_text(family="serif", color="gray20"),
plot.title = element_text(family="serif", face="bold", color="midnightblue", size=16),
plot.subtitle = element_text(family="serif", color="gray20"),
axis.text.y = element_text(family="sans", face="italic", color="gray40"),
axis.text.x = element_text(family="sans", color="gray40"),
plot.caption = element_text(family="mono", color="black")) +
scale_fill_manual(values=c("darkblue","darkorange"),
labels=c(expression("Country Album " * italic("(Self-titled, Fearless, Speak Now)")),
expression("Pop Album " * italic("(1989, reputation, Lover)")))) +
labs(title="From Country to Pop\nHas Taylor Swift's Music Changed?",
subtitle="Audio Features of Tracks on Recorded Studio Albums",
x="", fill="", y="", caption="Source: Spotify")
ggplot(swift_tracks_cleaned) +
geom_density_ridges(aes(x=value, y=factor, fill=genre), scale=1.5, color="white", alpha=0.5) +
scale_x_continuous(limits=c(0, 1), breaks=seq(0, 1, 0.25), expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme_bw() +
theme(panel.border = element_blank(),
plot.margin = margin(0, 10, 0, 0),
legend.margin = margin(-10, 0, 0, 0),
legend.position = "top",
legend.justification = "left",
legend.direction = "vertical",
legend.text.align = 0,
legend.text = element_text(family="serif", color="gray20"),
plot.title = element_text(family="serif", face="bold", color="midnightblue", size=16),
plot.subtitle = element_text(family="serif", color="gray20"),
axis.text.y = element_text(family="sans", face="italic", color="gray40"),
axis.line = element_line(color="lightgray") +
axis.text.x = element_text(family="sans", color="gray40"),
ggplot(swift_tracks_cleaned) +
geom_density_ridges(aes(x=value, y=factor, fill=genre), scale=1.5, color="white", alpha=0.5) +
scale_x_continuous(limits=c(0, 1), breaks=seq(0, 1, 0.25), expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme_bw() +
theme(panel.border = element_blank(),
plot.margin = margin(0, 10, 0, 0),
legend.margin = margin(-10, 0, 0, 0),
legend.position = "top",
legend.justification = "left",
legend.direction = "vertical",
legend.text.align = 0,
legend.text = element_text(family="serif", color="gray20"),
plot.title = element_text(family="serif", face="bold", color="midnightblue", size=16),
plot.subtitle = element_text(family="serif", color="gray20"),
axis.text.y = element_text(family="sans", face="italic", color="gray40"),
axis.line = element_line(color="lightgray"),
axis.text.x = element_text(family="sans", color="gray40"),
plot.caption = element_text(family="mono", color="black")) +
scale_fill_manual(values=c("darkblue","darkorange"),
labels=c(expression("Country Album " * italic("(Self-titled, Fearless, Speak Now)")),
expression("Pop Album " * italic("(1989, reputation, Lover)")))) +
labs(title="From Country to Pop\nHas Taylor Swift's Music Changed?",
subtitle="Audio Features of Tracks on Recorded Studio Albums",
x="", fill="", y="", caption="Source: Spotify")
ggplot(swift_tracks_cleaned) +
geom_density_ridges(aes(x=value, y=factor, fill=genre), scale=1.5, color="white", alpha=0.5) +
scale_x_continuous(limits=c(0, 1), breaks=seq(0, 1, 0.25), expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme_classic() +
theme(panel.border = element_blank(),
plot.margin = margin(0, 10, 0, 0),
legend.margin = margin(-10, 0, 0, 0),
legend.position = "top",
legend.justification = "left",
legend.direction = "vertical",
legend.text.align = 0,
legend.text = element_text(family="serif", color="gray20"),
plot.title = element_text(family="serif", face="bold", color="midnightblue", size=16),
plot.subtitle = element_text(family="serif", color="gray20"),
axis.text.y = element_text(family="sans", face="italic", color="gray40"),
axis.line = element_line(color="lightgray"),
axis.text.x = element_text(family="sans", color="gray40"),
plot.caption = element_text(family="mono", color="black")) +
scale_fill_manual(values=c("darkblue","darkorange"),
labels=c(expression("Country Album " * italic("(Self-titled, Fearless, Speak Now)")),
expression("Pop Album " * italic("(1989, reputation, Lover)")))) +
labs(title="From Country to Pop\nHas Taylor Swift's Music Changed?",
subtitle="Audio Features of Tracks on Recorded Studio Albums",
x="", fill="", y="", caption="Source: Spotify")
ggplot(swift_tracks_cleaned) +
geom_density_ridges(aes(x=value, y=factor, fill=genre), scale=1.5, color="white", alpha=0.5) +
scale_x_continuous(limits=c(0, 1), breaks=seq(0, 1, 0.25), expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme_light() +
theme(panel.border = element_blank(),
plot.margin = margin(0, 10, 0, 0),
legend.margin = margin(-10, 0, 0, 0),
legend.position = "top",
legend.justification = "left",
legend.direction = "vertical",
legend.text.align = 0,
legend.text = element_text(family="serif", color="gray20"),
plot.title = element_text(family="serif", face="bold", color="midnightblue", size=16),
plot.subtitle = element_text(family="serif", color="gray20"),
axis.text.y = element_text(family="sans", face="italic", color="gray40"),
axis.line = element_line(color="lightgray"),
axis.text.x = element_text(family="sans", color="gray40"),
plot.caption = element_text(family="mono", color="black")) +
scale_fill_manual(values=c("darkblue","darkorange"),
labels=c(expression("Country Album " * italic("(Self-titled, Fearless, Speak Now)")),
expression("Pop Album " * italic("(1989, reputation, Lover)")))) +
labs(title="From Country to Pop\nHas Taylor Swift's Music Changed?",
subtitle="Audio Features of Tracks on Recorded Studio Albums",
x="", fill="", y="", caption="Source: Spotify")
ggplot(swift_tracks_cleaned) +
geom_density_ridges(aes(x=value, y=factor, fill=genre), scale=1.5, color="white", alpha=0.5) +
scale_x_continuous(limits=c(0, 1), breaks=seq(0, 1, 0.25), expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme_light() +
theme(panel.border = element_blank(),
plot.margin = margin(0, 10, 0, 0),
legend.margin = margin(-10, 0, 0, 0),
legend.position = "top",
legend.justification = "left",
legend.direction = "vertical",
legend.text.align = 0,
legend.text = element_text(family="serif", color="gray20"),
plot.title = element_text(family="serif", face="bold", color="midnightblue", size=16),
plot.subtitle = element_text(family="serif", color="gray20"),
axis.text.y = element_text(family="sans", face="italic", color="gray40"),
axis.text.x = element_text(family="sans", color="gray40"),
plot.caption = element_text(family="mono", color="black")) +
scale_fill_manual(values=c("darkblue","darkorange"),
labels=c(expression("Country Album " * italic("(Self-titled, Fearless, Speak Now)")),
expression("Pop Album " * italic("(1989, reputation, Lover)")))) +
labs(title="From Country to Pop\nHas Taylor Swift's Music Changed?",
subtitle="Audio Features of Tracks on Recorded Studio Albums",
x="", fill="", y="", caption="Source: Spotify")
ggplot(swift_tracks_cleaned) +
geom_density_ridges(aes(x=value, y=factor, fill=genre), scale=1.5, color="white", alpha=0.5) +
scale_x_continuous(limits=c(0, 1), breaks=seq(0, 1, 0.25), expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme_light() +
theme(aspect.ratio = 0.66,
panel.border = element_blank(),
plot.margin = margin(0, 10, 0, 0),
legend.margin = margin(-10, 0, 0, 0),
legend.position = "top",
legend.justification = "left",
legend.direction = "vertical",
legend.text.align = 0,
legend.text = element_text(family="serif", color="gray20"),
plot.title = element_text(family="serif", face="bold", color="midnightblue", size=16),
plot.subtitle = element_text(family="serif", color="gray20"),
axis.text.y = element_text(family="sans", face="italic", color="gray40"),
axis.text.x = element_text(family="sans", color="gray40"),
plot.caption = element_text(family="mono", color="black")) +
scale_fill_manual(values=c("darkblue","darkorange"),
labels=c(expression("Country Album " * italic("(Self-titled, Fearless, Speak Now, Red)")),
expression("Pop Album " * italic("(1989, reputation, Lover)")))) +
labs(title="From Country to Pop\nHas Taylor Swift's Music Changed?",
subtitle="Audio Features of Tracks on Recorded Studio Albums",
x="", fill="", y="", caption="Source: Spotify")
library(TMDb)
install.packages("TMDb")
movies <- search_movie(3d1b240ce44c8b72696e9a3c43e3f992)
movies <- search_movie("3d1b240ce44c8b72696e9a3c43e3f992")
library(TMDb)
movies <- search_movie("3d1b240ce44c8b72696e9a3c43e3f992")
simpsons <- search_tv("3d1b240ce44c8b72696e9a3c43e3f992", query = "The Simpsons")
View(simpsons)
View(simpsons)
stuff <-  search()
search()
View(simpsons)
View(simpsons)
stuff <- tv_episode("3d1b240ce44c8b72696e9a3c43e3f992", 456)
stuff <- tv("3d1b240ce44c8b72696e9a3c43e3f992", 456)
View(stuff)
stuff <- tv("3d1b240ce44c8b72696e9a3c43e3f992", 456)$seasons
View(stuff)
tv_episode("3d1b240ce44c8b72696e9a3c43e3f992", 456, season_number = 5, episode_number = 2)
ep <- tv_episode("3d1b240ce44c8b72696e9a3c43e3f992", 456, season_number = 5, episode_number = 2)
View(ep)
ep <- tv_episode("3d1b240ce44c8b72696e9a3c43e3f992", 456, season_number = 5, episode_number = 2) %>%
select(air_date)
source('~/.active-rstudio-document', echo=TRUE)
ep <- tv_episode("3d1b240ce44c8b72696e9a3c43e3f992", 456, season_number = 5, episode_number = 2) %>%
select(air_date, name, id)
ep <- data.frame(tv_episode("3d1b240ce44c8b72696e9a3c43e3f992", 456, season_number = 5, episode_number = 2))
View(ep)
ep <- data.frame(tv_episode("3d1b240ce44c8b72696e9a3c43e3f992", 456, season_number = 5, episode_number = 66))
movies <- data.frame(discover_movie("3d1b240ce44c8b72696e9a3c43e3f992"))
tv_shows <- data.frame(discover_tv("3d1b240ce44c8b72696e9a3c43e3f992"))
View(movies)
View(tv_shows)
library(shiny); runApp('Classes (Spring 2020)/STA 404/sta404_finalproject/sta404_finalproject_shinyapp.R')
runApp('Classes (Spring 2020)/STA 404/sta404_finalproject/sta404_finalproject_shinyapp.R')
runApp('sta404_finalproject/sta404_finalproject_shinyapp.R')
runApp('Classes (Spring 2020)/STA 404/sta404_finalproject/sta404_finalproject_shinyapp.R')
runApp('sta404_finalproject/sta404_finalproject_shinyapp.R')
runApp('Classes (Spring 2020)/STA 404/sta404_finalproject/sta404_finalproject_shinyapp.R')
runApp('Classes (Spring 2020)/STA 404/sta404_finalproject/sta404_finalproject_shinyapp.R')
runApp('Classes (Spring 2020)/STA 404/sta404_finalproject/sta404_finalproject_shinyapp.R')
runApp('Classes (Spring 2020)/STA 404/sta404_finalproject/sta404_finalproject_shinyapp.R')
runApp('Classes (Spring 2020)/STA 404/sta404_finalproject/sta404_finalproject_shinyapp.R')
runApp('Classes (Spring 2020)/STA 404/sta404_finalproject/sta404_finalproject_shinyapp.R')
runApp('Classes (Spring 2020)/STA 404/sta404_finalproject/sta404_finalproject_shinyapp.R')
runApp('Classes (Spring 2020)/STA 404/sta404_finalproject/sta404_finalproject_shinyapp.R')
library(shiny); runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
nrow(tmp_guest_star_data)
runApp('sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
runApp('GitHub/The-Simpsons-Statistics/sta404_finalproject_shinyapp.R')
load("Simpsons_Episodes.RData")
load("Simpsons_Episodes_Guest_Stars.RData")
load("Simpsons_Episodes_Crew.RData")
load("Simpsons_Episodes.RData")
load("Simpsons_Episodes_Guest_Stars.RData")
load("Simpsons_Episodes_Crew.RData")
setwd("~/GitHub/The-Simpsons-Statistics")
load("Simpsons_Episodes.RData")
load("Simpsons_Episodes_Guest_Stars.RData")
load("Simpsons_Episodes_Crew.RData")
View(crew)
runApp('sta404_finalproject_shinyapp.R')
runApp('sta404_finalproject_shinyapp.R')
runApp('sta404_finalproject_shinyapp.R')
runApp('sta404_finalproject_shinyapp.R')
runApp('sta404_finalproject_shinyapp.R')
runApp('sta404_finalproject_shinyapp.R')
runApp('sta404_finalproject_shinyapp.R')
runApp('sta404_finalproject_shinyapp.R')
runApp('sta404_finalproject_shinyapp.R')
runApp('sta404_finalproject_shinyapp.R')
runApp('sta404_finalproject_shinyapp.R')
setwd("~/GitHub/The-Simpsons-Statistics")
seasons <- tv(api_key = "3d1b240ce44c8b72696e9a3c43e3f992", id = 456)$seasons
seasons <- seasons %>%
# Filter out the Tracey Ullman shorts
filter(season_number > 0 & season_number < 31)
# Change the episodes in the most recent season to include only ones that have aired
# Create a blank dataset for all the episodes, guest stars, and crew
episodes <- data.frame()
guest_stars <- data.frame()
crew <- data.frame()
# Create a tracking variable for the total episode number
total_ep_num = 1
# Do a nested for-loop to get each episode
# For each season...
season_number = max(seasons$season_number)
for (i in 1:season_number) {
# For each episode in the season
for (j in 1:seasons[i,]$episode_count) {
# Print the episode being acquired
print(paste("### Getting Season", i, "- Episode",j))
# Get the episode
ep <- tv_episode("3d1b240ce44c8b72696e9a3c43e3f992", 456, season_number = i, episode_number = j)
# If this episode had guest stars, add it to the guest stars database
if (length(ep$guest_stars) > 0) {
guest_stars_list <- data.frame(ep$guest_stars) %>%
mutate(episode_id = ep$id,
episode_name = ep$name,
season_num = i,
episode_num = j)
guest_stars <- rbind(guest_stars, guest_stars_list)
}
# If this episode's crew is listed, add it to the database
if (length(ep$crew) > 0) {
crew_list <- data.frame(ep$crew) %>%
mutate(episode_id = ep$id,
episode_name = ep$name,
season_num = i,
episode_num = j)
crew <- rbind(crew, crew_list)
}
# Convert the list to a dataframe
ep <- data.frame(ep[-c(2,4)])
ep <- ep %>%
mutate(total_episode_num = total_ep_num)
total_ep_num = total_ep_num + 1
# Merge to the existing dataset
episodes <- rbind(episodes, ep)
}
}
# Load the Simpsons Ratings and Viewings data
# SOURCE: https://data.world/data-society/the-simpsons-by-the-data
ratings <- read_csv("simpsons_episodes.csv") %>%
select(imdb_rating, imdb_votes, us_viewers_in_millions, season, number_in_season)
# ====================================================== 3.) Data Handling
# Calculate the number of guest stars per episode and season
guest_stars <- guest_stars %>%
left_join(tmp <- guest_stars %>%
group_by(season_num, episode_num) %>%
summarize(episode_guest_star_num = n()) %>%
ungroup() %>%
group_by(season_num) %>%
mutate(season_guest_star_num = sum(episode_guest_star_num)))
# Add the number of episodes per season as a column
episodes <- episodes %>%
group_by(season_number) %>%
mutate(season_episode_num = n())
# Create a large dataset of the guest stars and crew, left-joined
simpsons_episodes <- episodes %>%
left_join(crew, by = c("id" = "episode_id", "name" = "episode_name",
"season_number" = "season_num", "episode_number" = "episode_num")) %>%
left_join(guest_stars, by = c("id" = "episode_id", "name" = "episode_name",
"season_number" = "season_num", "episode_number" = "episode_num")) %>%
left_join(ratings, by = c("season_number" = "season", "episode_number" = "number_in_season")) %>%
rename(crew_name = name.y,
guest_name = name.y.y,
episode_title = name) %>%
group_by(season_number) %>%
mutate(episode_guest_star_num = ifelse(is.na(episode_guest_star_num), 0, episode_guest_star_num),
season_guest_star_num = ifelse(is.na(season_guest_star_num), max(season_guest_star_num, na.rm = TRUE), season_guest_star_num ),
avg_guest_stars = round(season_guest_star_num  / season_episode_num, digits=2),
avg_season_rating = round(mean(imdb_rating), digits=2))
# ====================================================== 4.) Save Data
# Save the dataset
save(simpsons_episodes, file="Simpsons_Episodes.RData")
library(TMDb)
library(tidyverse)
# ====================================================== 2.) Load Datasets
# Get each season of the Simpsons
seasons <- tv(api_key = "3d1b240ce44c8b72696e9a3c43e3f992", id = 456)$seasons
seasons <- seasons %>%
# Filter out the Tracey Ullman shorts
filter(season_number > 0 & season_number < 31)
# Change the episodes in the most recent season to include only ones that have aired
# Create a blank dataset for all the episodes, guest stars, and crew
episodes <- data.frame()
guest_stars <- data.frame()
crew <- data.frame()
# Create a tracking variable for the total episode number
total_ep_num = 1
# Do a nested for-loop to get each episode
# For each season...
season_number = max(seasons$season_number)
for (i in 1:season_number) {
# For each episode in the season
for (j in 1:seasons[i,]$episode_count) {
# Print the episode being acquired
print(paste("### Getting Season", i, "- Episode",j))
# Get the episode
ep <- tv_episode("3d1b240ce44c8b72696e9a3c43e3f992", 456, season_number = i, episode_number = j)
# If this episode had guest stars, add it to the guest stars database
if (length(ep$guest_stars) > 0) {
guest_stars_list <- data.frame(ep$guest_stars) %>%
mutate(episode_id = ep$id,
episode_name = ep$name,
season_num = i,
episode_num = j)
guest_stars <- rbind(guest_stars, guest_stars_list)
}
# If this episode's crew is listed, add it to the database
if (length(ep$crew) > 0) {
crew_list <- data.frame(ep$crew) %>%
mutate(episode_id = ep$id,
episode_name = ep$name,
season_num = i,
episode_num = j)
crew <- rbind(crew, crew_list)
}
# Convert the list to a dataframe
ep <- data.frame(ep[-c(2,4)])
ep <- ep %>%
mutate(total_episode_num = total_ep_num)
total_ep_num = total_ep_num + 1
# Merge to the existing dataset
episodes <- rbind(episodes, ep)
}
}
# Load the Simpsons Ratings and Viewings data
# SOURCE: https://data.world/data-society/the-simpsons-by-the-data
ratings <- read_csv("simpsons_episodes.csv") %>%
select(imdb_rating, imdb_votes, us_viewers_in_millions, season, number_in_season)
# ====================================================== 3.) Data Handling
# Calculate the number of guest stars per episode and season
guest_stars <- guest_stars %>%
left_join(tmp <- guest_stars %>%
group_by(season_num, episode_num) %>%
summarize(episode_guest_star_num = n()) %>%
ungroup() %>%
group_by(season_num) %>%
mutate(season_guest_star_num = sum(episode_guest_star_num)))
# Add the number of episodes per season as a column
episodes <- episodes %>%
group_by(season_number) %>%
mutate(season_episode_num = n())
# Create a large dataset of the guest stars and crew, left-joined
simpsons_episodes <- episodes %>%
left_join(crew, by = c("id" = "episode_id", "name" = "episode_name",
"season_number" = "season_num", "episode_number" = "episode_num")) %>%
left_join(guest_stars, by = c("id" = "episode_id", "name" = "episode_name",
"season_number" = "season_num", "episode_number" = "episode_num")) %>%
left_join(ratings, by = c("season_number" = "season", "episode_number" = "number_in_season")) %>%
rename(crew_name = name.y,
guest_name = name.y.y,
episode_title = name) %>%
group_by(season_number) %>%
mutate(episode_guest_star_num = ifelse(is.na(episode_guest_star_num), 0, episode_guest_star_num),
season_guest_star_num = ifelse(is.na(season_guest_star_num), max(season_guest_star_num, na.rm = TRUE), season_guest_star_num ),
avg_guest_stars = round(season_guest_star_num  / season_episode_num, digits=2),
avg_season_rating = round(mean(imdb_rating), digits=2))
# ====================================================== 4.) Save Data
# Save the dataset
save(simpsons_episodes, file="Simpsons_Episodes.RData")
library(shiny); runApp('sta404_finalproject_shinyapp.R')
